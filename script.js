console.log('-------------------Завдання 1---------------------------------');
// -  Створити функцію конструктор для об'єкту який описує теги
// Властивості
//  -назва тегу
//  - опис його дій
//  - масив з атрибутами (2-3 атрибути максимум)
//  Кожен атрибут описати як окремий який буде містити
//  -назву атрибуту
//  -опис дії атрибуту
//  інформацію брати з htmlbook.ru

//  Таким чином описати теги
//  -a
//  -div
//  -h1
//  -span
//  -input
//  -form
//  -option
//  -select
//  Приклад результату
//    {
//         titleOfTag: 'area',
//         action: `Каждый элемент <area> определяет активные области изображения, которые являются ссылками...`,
//         attrs: [
//         {titleOfAttr: 'accesskey', actionOfAttr: 'Переход к области с помощью комбинации клавиш'},
//         {/*some props and values*/},
//         {/*...*/},
//         {/*...*/},
//         ]

//    }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// let tagInfo = [{
//     titleOfTag: 'a',
//     action: 'Тег <a> является одним из важных элементов HTML и предназначен для создания ссылок. В зависимости от присутствия атрибутов name или href тег <a> устанавливает ссылку или якорь. Якорем называется закладка внутри страницы, которую можно указать в качестве цели ссылки. При использовании ссылки, которая указывает на якорь, происходит переход к закладке внутри веб-страницы.',
//     attrs: [
//         {
//             titleOfAttr: 'accesskey',
//             actionOfAttr: 'Активация ссылки с помощью комбинации клавиш.'
//         },
//         {
//             titleOfAttr: 'coords',
//             actionOfAttr: 'Устанавливает координаты активной области.'
//         },
//         {
//             titleOfAttr: 'download',
//             actionOfAttr: 'Предлагает скачать указанный по ссылке файл.'
//         },
//     ]
// },
// {
//     titleOfTag: 'div',
//     action: 'Элемент <div> является блочным элементом и предназначен для выделения фрагмента документа с целью изменения вида содержимого. Как правило, вид блока управляется с помощью стилей. Чтобы не описывать каждый раз стиль внутри тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора',
//     attrs: [
//         {
//             titleOfAttr: 'align',
//             actionOfAttr: 'Задает выравнивание содержимого тега <div>.'
//         },
//         {
//             titleOfAttr: 'title',
//             actionOfAttr: 'Добавляет всплывающую подсказку к содержимому.'
//         },
//         {
//             titleOfAttr: 'class',
//             actionOfAttr: 'Определяет имя класса, которое позволяет связать тег со стилевым оформлением.'
//         },
//     ]
// },
// {
//     titleOfTag: 'h1',
//     action: 'HTML предлагает шесть заголовков разного уровня, которые показывают относительную важность секции, расположенной после заголовка. Так, тег h1 представляет собой наиболее важный заголовок первого уровня, а тег h6 служит для обозначения заголовка шестого уровня и является наименее значительным. По умолчанию, заголовок первого уровня отображается самым крупным шрифтом жирного начертания, заголовки последующего уровня по размеру меньше. Теги h1,...,h6 относятся к блочным элементам, они всегда начинаются с новой строки, а после них другие элементы отображаются на следующей строке. Кроме того, перед заголовком и после него добавляется пустое пространство.',
//     attrs: [
//         {
//             titleOfAttr: 'align',
//             actionOfAttr: 'Задает выравнивание содержимого тега <div>.'
//         },
//         {
//             titleOfAttr: 'hidden',
//             actionOfAttr: 'Скрывает содержимое элемента от просмотра.'
//         },
//         {
//             titleOfAttr: 'class',
//             actionOfAttr: 'Определяет имя класса, которое позволяет связать тег со стилевым оформлением.'
//         },
//     ]
// }
// ]
// function Createtag(titleOfTag, action, attrs) {
//     this.titleOfTag = titleOfTag;
//     this.action = action;
//     this.attrs = attrs;
// }
// for (i = 0; i < tagInfo.length; i++) {
//     var tag = new Createtag(tagInfo[i].titleOfTag, tagInfo[i].action, tagInfo[i].attrs,);
//     console.log(tag)
// }
// ...................................................................................................
console.log('-------------------Завдання 2---------------------------------');
// -  Створити класс  для об'єкту який описує теги
// Властивості
//  -назва тегу
//  - опис його дій
//  - масив з атрибутами (2-3 атрибути максимум)
//  Кожен атрибут описати як окремий який буде містити
//  -назву атрибуту
//  -опис дії атрибуту
//  інформацію брати з htmlbook.ru

//  Таким чином описати теги
//  -a
//  -div
//  -h1
//  -span
//  -input
//  -form
//  -option
//  -select
//  Приклад результату
//    {
//         titleOfTag: 'area',
//         action: `Каждый элемент <area> определяет активные области изображения, которые являются ссылками...`,
//         attrs: [
//         {titleOfAttr: 'accesskey', actionOfAttr: 'Переход к области с помощью комбинации клавиш'},
//         {/*some props and values*/},
//         {/*...*/},
//         {/*...*/},
//         ]

//    }
// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// let tagInfo = [{
//     titleOfTag: 'a',
//     action: 'Тег <a> является одним из важных элементов HTML и предназначен для создания ссылок. В зависимости от присутствия атрибутов name или href тег <a> устанавливает ссылку или якорь. Якорем называется закладка внутри страницы, которую можно указать в качестве цели ссылки. При использовании ссылки, которая указывает на якорь, происходит переход к закладке внутри веб-страницы.',
//     attrs: [
//         {
//             titleOfAttr: 'accesskey',
//             actionOfAttr: 'Активация ссылки с помощью комбинации клавиш.'
//         },
//         {
//             titleOfAttr: 'coords',
//             actionOfAttr: 'Устанавливает координаты активной области.'
//         },
//         {
//             titleOfAttr: 'download',
//             actionOfAttr: 'Предлагает скачать указанный по ссылке файл.'
//         },
//     ]
// },
// {
//     titleOfTag: 'div',
//     action: 'Элемент <div> является блочным элементом и предназначен для выделения фрагмента документа с целью изменения вида содержимого. Как правило, вид блока управляется с помощью стилей. Чтобы не описывать каждый раз стиль внутри тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора',
//     attrs: [
//         {
//             titleOfAttr: 'align',
//             actionOfAttr: 'Задает выравнивание содержимого тега <div>.'
//         },
//         {
//             titleOfAttr: 'title',
//             actionOfAttr: 'Добавляет всплывающую подсказку к содержимому.'
//         },
//         {
//             titleOfAttr: 'class',
//             actionOfAttr: 'Определяет имя класса, которое позволяет связать тег со стилевым оформлением.'
//         },
//     ]
// },
// {
//     titleOfTag: 'h1',
//     action: 'HTML предлагает шесть заголовков разного уровня, которые показывают относительную важность секции, расположенной после заголовка. Так, тег h1 представляет собой наиболее важный заголовок первого уровня, а тег h6 служит для обозначения заголовка шестого уровня и является наименее значительным. По умолчанию, заголовок первого уровня отображается самым крупным шрифтом жирного начертания, заголовки последующего уровня по размеру меньше. Теги h1,...,h6 относятся к блочным элементам, они всегда начинаются с новой строки, а после них другие элементы отображаются на следующей строке. Кроме того, перед заголовком и после него добавляется пустое пространство.',
//     attrs: [
//         {
//             titleOfAttr: 'align',
//             actionOfAttr: 'Задает выравнивание содержимого тега <div>.'
//         },
//         {
//             titleOfAttr: 'hidden',
//             actionOfAttr: 'Скрывает содержимое элемента от просмотра.'
//         },
//         {
//             titleOfAttr: 'class',
//             actionOfAttr: 'Определяет имя класса, которое позволяет связать тег со стилевым оформлением.'
//         },
//     ]
// }
// ]
// class Tag{
//     constructor(titleOfTag,action,attrs){
//         this.titleOfTag = titleOfTag;
//         this.action = action;
//         this.attrs = attrs; 
//         console.log(this)
//     }
// }
// let a = new Tag(tagInfo[0].titleOfTag,tagInfo[0].action,tagInfo[0].attrs);
// let div = new Tag(tagInfo[1].titleOfTag,tagInfo[1].action,tagInfo[1].attrs);
// let h1 = new Tag(tagInfo[2].titleOfTag,tagInfo[2].action,tagInfo[2].attrs);
// ...................................................................................................
console.log('-------------------Завдання 3---------------------------------');
// - Створити об'єкт car, з властивостями модель, виробник, рік випуску, максимальна швидкість, об'єм двигуна. 
// додати в об'єкт функції:
// -- drive () - яка виводить в консоль "їдемо зі швидкістю {максимальна швидкість} на годину"
// -- info () - яка виводить всю інформацію про автомобіль
// -- increaseMaxSpeed (newSpeed) - яка підвищує значення максимальної швидкості на значення newSpeed
// -- changeYear (newValue) - змінює рік випуску на значення newValue
// -- addDriver (driver) - приймає об'єкт який "водій" з довільним набором полів, і доавляет його в поточний об'єкт car
// /////////////////////////////////////////////////////////////////////////////////////////////////////////
// let car = {
//     model: 'zaz',
//     manufacturer: 'Ukraine',
//     year: 1988,
//     maxSpeed: 80,
//     engine: 800,
//     drive: function () {
//         console.log(`їдемо зі швидкістю ${this.maxSpeed} на годину`)
//     },
//     info: function () {
//         console.log(`
//                 model: ${this.model},
//                 manufacturer: ${this.manufacturer},
//                 year: ${this.year},
//                 maxSpeed: ${this.maxSpeed},
//                 engine: ${this.engine}`)
//     },
//     increaseMaxSpeed: function (newSpeed) {
//         this.maxSpeed = this.maxSpeed + newSpeed;
//     },
//     changeYear: function (newValue) {
//         this.year = newValue;
//     },
//     addDriver: function (driver) {
//         this.driver = driver;
//     },
// }
// console.log(car);
// car.info();
// car.changeYear(2000);
// console.log(car);
// car.addDriver({name: 'Andrii',age: 30});
// console.log(car);
// ...............................................................................................................
console.log('-------------------Завдання 4---------------------------------');
// - Створити функцію конструктор яка дозволяє створювати об'єкти car, з властивостями модель, виробник, рік випуску, 
// максимальна швидкість, об'єм двигуна. додати в об'єкт функції:
// -- drive () - яка виводить в консоль "їдемо зі швидкістю {максимальна швидкість} на годину"
// -- info () - яка виводить всю інформацію про автомобіль
// -- increaseMaxSpeed (newSpeed) - яка підвищує значення максимальної швидкості на значення newSpeed
// -- changeYear (newValue) - змінює рік випуску на значення newValue
// -- addDriver (driver) - приймає об'єкт який "водій" з довільним набором полів, і доавляет його в поточний об'єкт car
//////////////////////////////////////////////////////////////////////////////////////////////////////////
// function CreateCar(model, manufacturer, year, maxSpeed, engine,) {
//     this.model = model;
//     this.manufacturer = manufacturer;
//     this.year = year;
//     this.maxSpeed = maxSpeed;
//     this.engine = engine;
//     this.drive = function () {
//         console.log(`їдемо зі швидкістю ${this.maxSpeed} на годину`)
//     };
//     this.info = function () {
//         console.log(`
//                 model: ${this.model},
//                 manufacturer: ${this.manufacturer},
//                 year: ${this.year},
//                 maxSpeed: ${this.maxSpeed},
//                 engine: ${this.engine}`)
//     };
//     this.increaseMaxSpeed = function (newSpeed){
//         this.maxSpeed += newSpeed;
//     };
//     this.changeYear = function(newValue){
//         this.year = newValue;
//     };
//     this.addDriver = function(driver){
//         this.driver = driver;
//     };
// };
// let car = new CreateCar('zaz','ua',1985, 80, 600);
// console.log(car);
// .................................................................................................
console.log('-------------------Завдання 5---------------------------------');
// - Створити клас який дозволяє створювати об'єкти car, з властивостями модель, виробник, рік випуску, максимальна швидкість, об'єм двигуна. додати в об'єкт функції:
// -- drive () - яка виводить в консоль "їдемо зі швидкістю {максимальна швидкість} на годину"
// -- info () - яка виводить всю інформацію про автомобіль
// -- increaseMaxSpeed (newSpeed) - яка підвищує значення максимальної швидкості на значення newSpeed
// -- changeYear (newValue) - змінює рік випуску на значення newValue
// -- addDriver (driver) - приймає об'єкт який "водій" з довільним набором полів, і доавляет його в поточний об'єкт car
// ///////////////////////////////////////////////////////////////////////////////////////////////////////////
class CreateCar{
        constructor(model, manufacturer, year, maxSpeed, engine,) {
        this.model = model;
        this.manufacturer = manufacturer;
        this.year = year;
        this.maxSpeed = maxSpeed;
        this.engine = engine;
        this.drive = function () {
            console.log(`їдемо зі швидкістю ${this.maxSpeed} на годину`)
        };
        this.info = function () {
            console.log(`
                    model: ${this.model},
                    manufacturer: ${this.manufacturer},
                    year: ${this.year},
                    maxSpeed: ${this.maxSpeed},
                    engine: ${this.engine}`)
        };
        this.increaseMaxSpeed = function (newSpeed){
            this.maxSpeed += newSpeed;
        };
        this.changeYear = function(newValue){
            this.year = newValue;
        };
        this.addDriver = function(driver){
            this.driver = driver;
        };
    };
}
let car = new CreateCar('zaz','ua',1985, 80, 600);
console.log(car);
// ........................................................................................